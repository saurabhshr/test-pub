name: CI/CD pipeline

on:
  push:
    branches:
      - main
  # workflow_run:
  #   workflows: ["Build"]
  #   types:
  #     - completed

  # repository_dispatch:
  #   types: [data-event]

  # workflow_dispatch:
  #   inputs:
  #    releaseType:
  #      description: 'Where to release stage and prod'
  #      required: true
  #      default: dev
   

permissions:
      id-token: write
      contents: read

jobs:

  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Production Job
        run: echo "Running Production Job"

  deploy:
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.PAT_TOKEN }}
          approvers: saurabhshr  

      - name: Run Production Job
        run: echo "Running Production Job"    

  # deploy:
  #   if: github.event.inputs.releaseType == 'prod'
  #   name: Deploying build to environments
  #   runs-on: ubuntu-latest
  #   # if: ${{ github.event.workflow_run.conclusion == 'success' }}

    

  #   env:
  #     AWS_REGION: us-west-2  # Specify your AWS region

  #   steps:

    
  #     - name: Checkout Code
  #       uses: actions/checkout@v3


  #     - name: Request Approval
  #       if: github.ref == 'refs/heads/main'
  #       uses: trstringer/manual-approval@v1
  #       timeout-minutes: 60
  #       with:
  #           approvers: 'saurabhshr'  # Replace with the GitHub username of the approver
  #           secret: ${{ secrets.GH_OAUTH_TOKEN }}
  #           ISSUE_REPO: 'saurabhshr/test-pub'
  #           minimum-approvals: 1
  #           issue-title: "Approval Required: Deploy to Production"
  #           issue-body: "Please approve or deny the deployment of the latest changes to the production environment."
            
  #     #   with:
  #     #     ref: ${{ github.event.client_payload.ref }}
  #     # - run: echo "yeeee   ${{ github.event.client_payload.sha }}"
  #     # - run: echo ${{ github.event.client_payload }}
      
  #       # uses: actions/checkout@v3 
  #       # with:
  #       #   ref: ${{ github.event.client_payload.ref }}

  #     - name: Configure AWS Credentials
  #       id: aws-creds
  #       uses: aws-actions/configure-aws-credentials@v2
         
  #       with:
  #         role-to-assume: arn:aws:iam::710999489330:role/GitHub_OIDC  # Replace with your IAM role ARN
  #         aws-region: "us-west-2"

  #     - name: Get image tag from build workflow
  #       run: echo IMAGE_TAG=${{ github.event.workflow_run.head_commit.id }} >> $GITHUB_ENV

  #     - name: setting image name
  #       env:
  #         IMAGE_TAG: ${{ env.IMAGE_TAG }}
  #       run: |
  #         echo   "coming $IMAGE_TAG"
          
  #     - name: Download artifact
  #       id: download-artifact
  #       uses: dawidd6/action-download-artifact@v6
  #       with:
  #         github_token: ${{secrets.GITHUB_TOKEN}}
  #         workflow: build.yml
  #         name: build-sha

  #     - name: Debug artifact download
  #       run: ls -la

  #     - name: Read build SHA
  #       id: read-sha
  #       run: |
  #         SHA=$(cat sha.txt)
  #         echo "BUILD_SHA=$SHA" >> $GITHUB_ENV

  #     - name: Use the build SHA
  #       run: echo "Using build SHA ${{ env.BUILD_SHA }} for deployment"  

  #     - name: Fill in the new image ID in the Amazon ECS task definition
  #       id: task-def
  #       uses: aws-actions/amazon-ecs-render-task-definition@v1
  #       with:
  #         task-definition: definitions/task_definition.json
  #         container-name: poc-container
  #         image: 710999489330.dkr.ecr.us-west-2.amazonaws.com/poc:${{ env.IMAGE_TAG }} #${{ github.event.client_payload.image }}

  #     - name: Deploy Amazon ECS task definition
  #       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  #       with:
  #         task-definition: ${{ steps.task-def.outputs.task-definition }}
  #         service: poc-service
  #         cluster: poc-cluster
  #         wait-for-service-stability: true 
          

  
